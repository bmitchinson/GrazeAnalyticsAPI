swagger: '2.0'
info:
  description: The API powering Graze Analytics apricot frontend
  version: 0.0.1
  title: Graze Analytics
  # put the contact info for your development or API team
  contact:
    # TODO: Update with company email
    email: you@your-company.com
  license:
    # TODO: Need to update license with Daniels findings
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

paths:
  /feedback:
    get:
      summary: searches all feedback
      operationId: fetchFeedback
      description: A filter style query of all collected feedback in the system.
      produces:
      - application/json
      parameters:
      - in: query
        name: restaurantId
        description: pass in the restaurant id that you'd like feedback for
        required: true
        type: integer
      - in: query
        name: orderId
        description: filter by order id number
        required: false
        type: integer
      - in: query
        name: menuItemId
        description: filter by menu item id number
        required: false
        type: integer
      - in: query
        name: serverId
        description: filter by server id number
        required: false
        type: integer
      - in: query
        name: serverName
        description: attempt to filter by server name
        required: false
        type: integer
      - in: query
        name: tableId
        description: filter by table id number
        required: false
        type: integer
      - in: query
        name: starRatingValue
        description: filter by rating number
        required: false
        type: integer
      - in: query
        name: hasStarRating
        description: filter based on the existance of a star rating on the feedback
        required: false
        type: boolean
      - in: query
        name: hasComment
        description: filter based on the existance of a comment on the feedback
        required: false
        type: boolean
      - in: query
        name: timestamp_start
        description: filter to get feedback that occured on an order taken after this start timestamp
        required: false
        type: string
      - in: query
        name: timestamp_emd
        description: filter to get feedback that occured on an order taken before this end timestamp
        required: false
        type: string
        
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Feedback'
        204:
          description: no results match given criteria
        400:
          description: bad input parameter
    # post:
    #   summary: creates a piece of feedback
    #   operationId: addFeedback
    #   description: "requires: 1) both a restaurant_id and order_id 2) One of three: menu_item_id server_id table_id 3) star_rating or(/and) comment."
    #   consumes:
    #   - application/json
    #   produces:
    #   - application/json
    #   parameters:
    #   - in: body
    #     name: Feedback
    #     description: Feedback item to add
    #     schema:
    #       $ref: '#/definitions/Feedback'
    #   responses:
    #     201:
    #       description: Feedback created
    #     400:
    #       description: "Feedback object invalid (missing: ___ )"
  /orders:
    get:
      summary: Retrieve orders
      operationId: fetchOrders
      description: A filter style query of all orders in the system.
      produces:
      - application/json
      parameters:
      - in: query
        name: restaurantId
        description: pass in the restaurant id that you'd like orders for
        required: true
        type: integer
      - in: query
        name: serverId
        description: pass in the server id that you'd like orders regarding
        required: false
        type: integer
      - in: query
        name: tableId
        description: pass in the table id that you'd like orders regarding
        required: false
        type: integer
      - in: query
        name: limitResults
        description: pass in an integer representing the maximum amount of orders you'd like to receive. (Default 30)
        required: false
        type: integer
      responses:
        200:
          description: search results matching criteria, sorted in order of time, with the most recent first
          schema:
            type: array
            items:
              $ref: '#/definitions/Orders'
        400:
          description: bad input parameter
  /Servers:
    get:
      summary: retrieve all servers
      operationId: fetchServers
      description: A query to fetch all the servers
      produces:
      - application/json
      parameters:
      - in: query
        name: restaurantId
        description: pass in the restaurantId you'd like the servers of
        required: true
        type: integer
      responses:
        200:
          description: all servers
          schema:
            type: array
            items:
              $ref: '#/definitions/Servers'
  /MenuItems:
    get:
      summary: retrieve all menu items
      operationId: fetchMenuItems
      description: A query to fetch all the menu items
      produces:
      - application/json
      parameters:
      - in: query
        name: restaurantId
        description: pass in the restaurantId you'd like menu items of
        required: true
        type: integer
      responses:
       200:
        description: all menu items
        schema:
          type: array
          items:
            $ref: '#/definitions/MenuItems'
  /Tables:
    get:
      summary: retrieve all tables
      operationId: fetchTables
      description: A query to fetch all the tables
      produces:
      - application/json
      parameters:
      - in: query
        name: restaurantId
        description: pass in the restaurantId you'd like tables of
        required: true
        type: integer
      responses:
        200:
          description: all tables in restaurant
          schema:
            type: array
            items:
              $ref: '#/definitions/Tables'
  
  # /Restaurants:
  # Screen 9 on XD questions
  /login:
    post:
      summary: "TODO. A login will involve posting a login attempt to this route and receiving a JWT in return."
      responses:
        201:
          description: "{JWT}"
        400:
          description: Invalid Login 

definitions:
  Feedback:
    required:
    - id
    - restaurant_id
    - order_id
    properties:
      id:
        type: integer
      restaurant_id:
        type: integer
      order_id:
        type: integer
      menu_item_id:
        type: integer
      server_id:
        type: integer
      table_id:
        type: integer
      star_rating:
        type: integer
        example: 4
      comment:
        type: string
        example: "Service was great!"
  Orders:
    required:
    - id
    - restaurant_id
    - server_id
    - table_id
    - time_completed
    properties:
      id:
        type: integer
      restaurant_id:
        type: integer
      server_id:
        type: integer
      table_id:
        type: integer
      time_completed:
        type: string
  Tables:
    required:
    - id
    - restaurant_id
    properties:
      id:
        type: integer
      restaurant_id:
        type: integer
      description:
        type: string
        example: "Booth by the streetside window"
  Servers:
    required:
    - id
    - restaurant_id
    - f_name
    properties:
      id:
        type: integer
      restaurant_id:
        type: integer
      f_name:
        type: string
      l_name:
        type: string
  MenuItems:
    required:
    - id
    - restaurant_id
    - title
    properties:
      id:
        type: integer
      restaurant_id:
        type: integer
      title:
        type: string